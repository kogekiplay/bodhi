#!/usr/bin/fish

function logger-warn
set_color magenta
echo "$prefix ! $argv[1..-1]"
set_color normal
end
function logger-error
set_color red
echo "$prefix x $argv[1..-1]"
set_color normal
end
function logger-info-start
set_color normal
echo "$prefix + $argv[1..-1]"
set_color normal
end
function logger-info-end
set_color normal
echo "$prefix - $argv[1..-1]"
set_color normal
end
function logger-debug
set_color yellow
echo "$prefix ? $argv[1..-1]"
set_color normal
end
function logger-success
set_color green
echo "$prefix âˆš $argv[1..-1]"
set_color normal
end
function logger -d "a lib to print msg quickly"
switch $argv[1]
    case 0
        logger-info-start $argv[2..-1]
    case 1
        logger-info-end $argv[2..-1]
    case 2
        logger-success $argv[2..-1]
    case 3
        logger-debug $argv[2..-1]
    case 4
        logger-warn $argv[2..-1]
    case 5
        logger-error $argv[2..-1]
end
end

function help_echo
echo 'Dear user, this is a manual for bodhi - the open source hysteria backend by lotusproxy
In this manual,we`ll introduce how can you use our products.

A. Bedrock mode: run with config file
 1. Do "./product -i -v debug" to generate config files and download dependence
 2. modify ./config.ini
    upstream_api=https://example.com <- board address
    api_port=7653 <- Hysteria api port
    nodeid=1 <- remote nodeID
    core_path=/path/to/core <- path to hysteria executable
    tls_cert=/path/to/cert <-path to tls cert
    tls_key=/path/to/key <- path to tls key
    psk=leuleuleuleu <- password for nodeAPI
    obfs=true/false <- enable/disable obfs in hysteria
 3. After you finish that, ./product to launch
 4. CTRL+c or SIGINT to stop bodhi safely

B. OTF(On The Fly) mode: run with args
    -v/--verbose= [debug/info]
    -d/--root= [Root for running]
    -p/--port= [Hysteria api port]
    -u/--upstream= [Board address]
    -n/--nodeid= [Remote nodeID]
    -o/--tls_cert= [Path to cert]
    -k/--tls_key= [Path to key]
    -q/--core_path= [Path to core]
    -r/--psk= [Password for nodeAPI]
    -f/--on_the_fly [Must Have when using OTF mode]
    -b/--obfs= [enable/disable obfs in hysteria]
    
*END' 
end


function checkdep
    set 34ylli8_deps_ok 1
    for 34ylli8_deps in $argv
        if command -q -v $34ylli8_deps
        else
            set 34ylli8_deps_ok 0
            if test -z "$34ylli8_dep_lost"
                set 34ylli8_deps_lost "$34ylli8_deps $34ylli8_deps_lost"
            else
                set 34ylli8_deps_lost "$34ylli8_deps"
            end
        end
    end
end
function handle_stop
    rm -f userlist server.json knck stop
    echo
    logger 2 "@bodhi.handle_stop -> Stopped"
    exit 0
end
function configure
    sed -n "/$argv[1]=/"p "$argv[2]" | sed "s/$argv[1]=//g"
end
function init
    if test -r . -a -w .
    else
        logger 5 "@bodhi.init HALT -> bodhi.root is not readable or writable"
        exit 1
    end
    # def var
    set shop_list
    # check deps
    if test -e ./bin
        if test -d ./bin
            if test -e ./bin/yq
                if test -x ./bin/yq
                    switch (uname -m)
                        case x86_64
                            if file ./bin/yq | string match -rq x86-64
                            else
                                logger 4 "@bodhi.init WARN -> lib.yq wrong arch, fetching from gitub"
                                rm ./bin/yq
                                init
                            end
                        case aarch64
                            if file ./bin/yq | string match -rq aarch64
                            else
                                logger 4 "@bodhi.init WARN -> lib.yq wrong arch, fetching from gitub"
                                rm ./bin/yq
                                init
                            end
                    end
                    alias yq "$loc/bin/yq"
                else
                    chmod +x ./bin/yq
                    alias yq "$loc/bin/yq"
                end
            else
                logger 4 "@bodhi.init WARN -> lib.yq not found, fetching from gitub"
                switch (uname -m)
                    case x86_64
                        if curl -L --progress-bar (curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | string match -e "browser" | string match -r 'https://[^"]+' | string match -e "yq_linux_amd64" | string match -vr '\.tar\.gz') -o ./bin/yq
                            chmod +x ./bin/yq
                            alias yq "$loc/bin/yq"
                        else
                            logger 5 "@bodhi.init HALT -> Unable to fetch yq from github"
                            exit 1
                        end
                    case aarch64
                        if curl -L --progress-bar (curl -sL https://api.github.com/repos/mikefarah/yq/releases/latest | string match -e "browser" | string match -r 'https://[^"]+' | string match -e "yq_linux_arm64" | string match -vr '\.tar\.gz') -o ./bin/yq
                            chmod +x ./bin/yq
                            alias yq "$loc/bin/yq"
                        else
                            logger 5 "@bodhi.init HALT -> Unable to fetch yq from github"
                            exit 1
                        end
                end
            end
        else
            logger 5 "@bodhi.init HALT -> ./bin Not a directory, please remove it"
            exit 1
        end
    else
        mkdir bin
        init
    end
    # creating config
    if set -q _flag_on_the_fly
    else
        if test -e "$bodhi_conf"
        else
            echo 'upstream_api=https://example.com
api_port=7653
nodeid=1
core_path=/path/to/core
tls_cert=/path/to/cert
tls_key=/path/to/key
psk=leuleuleuleu
obfs=true' >"$bodhi_conf"
            logger 0 "@bodhi.init CONT -> Please modify the config file and relaunch bodhi again"
            exit 0
        end
    end
end

function push
    while true
        sleep $argv[1]
        curl -sL "$upstream_api/api/v1/server/UniProxy/user?node_id=$nodeid&node_type=hysteria&token=$psk" -o userlist
        set raw_conf_md5_check (curl -sL "$upstream_api/api/v1/server/UniProxy/config?node_id=$nodeid&node_type=hysteria&token=$psk" | md5sum | string split ' ')[1]
        # Create UserTable
        set users (yq '.users[].id' userlist)
        # Map id <=> uuid <=> base64_authstr
        for user in $users
            set uuid[$user] (yq ".users[]|select(.id == $user)|.uuid" userlist)
            set basestr[$user] (echo -n "$uuid[$user]" | base64)
        end
        # fetch data from api
        if $hysteria2
            # Loop to collect data High-Passly
            set hy2_return_data '{}'
            set hy2_stat (curl -sL "http://127.0.0.1:$api_port/traffic")
            if test -z "$hy2_stat"
            else
                for hy2_uuid in (echo "$hy2_stat" | yq e 'keys | .[]')
                    set hy2_id (contains --index "$hy2_uuid" $uuid)
                    set hy2_download[$hy2_id] (echo "$hy2_stat" | yq ".$hy2_uuid.rx")
                    set hy2_upload[$hy2_id] (echo "$hy2_stat" | yq ".$hy2_uuid.tx")
                    set hy2_return_data (echo -n "$hy2_return_data" | yq -o=json ".$hy2_id = [$hy2_upload[$hy2_id], $hy2_download[$hy2_id]]")
                end
            end
            # Report data to panel
            if test "$hy2_return_data" = '{}'
                if test "$bodhi_verbose" = debug
                    logger 3 "@bodhi.push CONT -> No usage, skip reporting"
                end
            else
                if test "$bodhi_verbose" = debug
                    logger 3 "@bodhi.push CONT -> Ready to push with following data"
                    logger 3 "$hy2_return_data"
                end
                set clength (echo -n "$hy2_return_data" | wc -c)
                curl -sL -X POST -H "Content-Type: application/json" -H "Content-Length: $clength" -d "$hy2_return_data" "$upstream_api/api/v1/server/UniProxy/push?node_id=$nodeid&node_type=hysteria&token=$psk" | yq
                # Refresh data
                if curl -sL "http://127.0.0.1:$api_port/traffic?clear=1"; and test "$bodhi_verbose" = debug
                    echo
                    logger 3 "@bodhi.push CONT -> Stats purged"
                end
            end
            if test "$raw_conf_md5_check" != "$argv[3]"
                set raw_conf (curl -sL "$upstream_api/api/v1/server/UniProxy/config?node_id=$nodeid&node_type=hysteria&token=$psk")
                if string match -q '*obfs*' -- $raw_conf
                    logger 4 "@bodhi.push WARN -> New config from panel arrived, re-init server"
                    break
                end
            end
        else
            set raw_statis (curl -sL "http://127.0.0.1:$api_port/metrics" | string collect)
            if test -z $raw_statis
                if test "$bodhi_verbose" = debug
                    logger 3 "@bodhi.push CONT -> No usage, skip reporting"
                end
                if test "$raw_conf_md5_check" != "$argv[3]"
                    set raw_conf (curl -sL "$upstream_api/api/v1/server/UniProxy/config?node_id=$nodeid&node_type=hysteria&token=$psk")
                    if string match -q '*obfs*' -- $raw_conf
                        logger 4 "@bodhi.push WARN -> New config from panel arrived, re-init server"
                        break
                    end
                end
            else
                # Loop to collect data High-Passly
                for line_stat in (curl -sL "http://127.0.0.1:$api_port/metrics")
                    if string match -q '*'\#'*' -- $line_stat; or string match -q '*active_conn*' -- $line_stat
                    else
                        set line_id (contains --index -- (string match -r 'auth="(.+?)"' $line_stat)[2] $basestr)
                        set usage (math (string split ' ' -- $line_stat)[2])
                        if string match -rq uplink -- $line_stat
                            if test -z $last_upload[$line_id]
                                set last_upload[$line_id] 0
                            end
                            set upload[$line_id] (math $usage - $last_upload[$line_id])
                            set last_upload[$line_id] $usage
                        else
                            if test -z $last_download[$line_id]
                                set last_download[$line_id] 0
                            end
                            set download[$line_id] (math $usage - $last_download[$line_id])
                            set last_download[$line_id] $usage
                        end
                    end
                end
            end
            # compose json data
            set return_data '{}'
            for user in $users
                if test -z $upload[$user]; and test -z $download[$user]
                else
                    if test $upload[$user] = 0; and test $download[$user] = 0
                    else
                        set return_data (echo -n "$return_data" | yq -o=json ".$user = [$upload[$user], $download[$user]]")
                    end
                end
            end
            if test "$bodhi_verbose" = debug
                logger 3 "@bodhi.push CONT -> Ready to push with following data"
                logger 3 "$return_data"
            end
            # Report data to panel
            if test "$return_data" = '{}'
                if test "$bodhi_verbose" = debug
                    logger 3 "@bodhi.push CONT -> No usage, skip reporting"
                end
            else
                set clength (echo -n "$return_data" | wc -c)
                curl -sL -X POST -H "Content-Type: application/json" -H "Content-Length: $clength" -d "$return_data" "$upstream_api/api/v1/server/UniProxy/push?node_id=$nodeid&node_type=hysteria&token=$psk" | yq
            end
            if test "$raw_conf_md5_check" != "$argv[3]"
                set raw_conf (curl -sL "$upstream_api/api/v1/server/UniProxy/config?node_id=$nodeid&node_type=hysteria&token=$psk")
                if string match -q '*obfs*' -- $raw_conf
                    logger 4 "@bodhi.push WARN -> New config from panel arrived, re-init server"
                    break
                end
            end
        end
    end
    kill $argv[2]
    rm -f userlist server.json knck stop
    chamber
end

#-> use: ["pust", "@bodhi.lib.yq"]
function chamber
    # def vars
    set raw_conf host server_port up_mbps down_mbps obfs
    # fetch data from upstream for the first time
    if test "$bodhi_verbose" = debug
        logger 3 "@bodhi.chamber CONT -> Fetching INIT Data"
    end
    if set raw_conf (curl -sL "$upstream_api/api/v1/server/UniProxy/config?node_id=$nodeid&node_type=hysteria&token=$psk")
        set raw_conf_md5 (echo -n "$raw_conf" | md5sum | string split ' ')[1]
    else
        logger 5 "@bodhi.chamber HALT -> Can't fetch init conf, abort"
        exit 1
    end
    if curl -sL "$upstream_api/api/v1/server/UniProxy/user?node_id=$nodeid&node_type=hysteria&token=$psk" -o userlist
    else
        logger 5 "@bodhi.chamber HALT -> Can't fetch init userlist, abort"
        exit 1
    end
    if test "$bodhi_verbose" = debug
    else
        logger 3 "@bodhi.chamber CONT -> Fetched data $raw_conf"
    end
    # generating conf
    set host (echo "$raw_conf" | yq .host)
    set server_port (echo "$raw_conf" | yq .server_port)
    set up_mbps (echo "$raw_conf" | yq .up_mbps)
    set down_mbps (echo "$raw_conf" | yq .down_mbps)
    set obfs (echo "$raw_conf" | yq .obfs)
    set push_interval (echo "$raw_conf" | yq .base_config.push_interval)
    # Check TLSnec
    # Check core
    if test -e $tls_cert; and test -e $tls_key
    else
        logger 5 "@bodhi.init HALT -> TLS cert or TLS key is not found at bodhi.tls_x"
        exit 1
    end
    if test -e "$core_path"
        if test -x "$core_path"
            if set hysteria_ver ("$core_path" version)
            else
                if set hysteria_ver ("$core_path" -v)
                else
                    logger 5 "@bodhi.init HALT -> Unable to ign hysteria core"
                    exit 1
                end
            end
        else
            chmod +x "$core_path"
            if set hysteria_ver ("$core_path" version)
            else
                if set hysteria_ver ("$core_path" -v)
                else
                    logger 5 "@bodhi.init HALT -> Unable to ign hysteria core"
                    exit 1
                end
            end
        end
    else
        logger 5 "@bodhi.init HALT -> Hysteria core is not found at bodhi.core_path"
        exit 1
    end
    # detect hysteria ver
    if echo "$hysteria_ver" | string match -qe v2
        set -x hysteria2 true
    else
        set -x hysteria2 false
    end
    if $ipv6
        if $hysteria2
            if test "$obfs" = true
                echo "listen: :14444
obfs:
  type: salamander
  salamander:
    password: $obfs
tls:
  type: tls
  cert: $tls_cert
  key: $tls_key
auth:
  type: command
  command: ./knck
trafficStats:
  listen: 127.0.0.1:$api_port
outbounds:
  - name: defob
    type: direct
    direct:
      mode: 64" >server.yaml
            else
                echo "listen: :14444
tls:
  type: tls
  cert: $tls_cert
  key: $tls_key
auth:
  type: command
  command: ./knck
trafficStats:
  listen: 127.0.0.1:$api_port
outbounds:
  - name: defob
    type: direct
    direct:
      mode: 64" >server.yaml
            end
        else
            if test "$obfs" = true
                echo "{
    \"listen\": \":14444\",
    \"obfs\": \"$obfs\",
    \"cert\": \"$tls_cert\",
    \"prometheus_listen\": \"127.0.0.1:$api_port\",
    \"resolve_preference\": \"64\",
    \"key\": \"$tls_key\" ,
    \"auth\": {
        \"mode\": \"external\",
        \"config\": {
            \"cmd\": \"./knck\"
        }
    }
}" >server.json
            else
                echo "{
    \"listen\": \":14444\",
    \"cert\": \"$tls_cert\",
    \"prometheus_listen\": \"127.0.0.1:$api_port\",
    \"resolve_preference\": \"64\",
    \"key\": \"$tls_key\" ,
    \"auth\": {
        \"mode\": \"external\",
        \"config\": {
            \"cmd\": \"./knck\"
        }
    }
}" >server.json
            end
        end
    else
        if $hysteria2
            if test "$obfs" = true
                echo "listen: :14444
obfs:
  type: salamander
  salamander:
    password: $obfs
tls:
  type: tls
  cert: $tls_cert
  key: $tls_key
auth:
  type: command
  command: ./knck
trafficStats:
  listen: 127.0.0.1:$api_port
outbounds:
  - name: defob
    type: direct" >server.yaml
            else
                echo "listen: :14444
tls:
  type: tls
  cert: $tls_cert
  key: $tls_key
auth:
  type: command
  command: ./knck
trafficStats:
  listen: 127.0.0.1:$api_port
outbounds:
  - name: defob
    type: direct" >server.yaml
            end
        else
            if test "$obfs" = true
                echo "{
    \"listen\": \":14444\",
    \"obfs\": \"$obfs\",
    \"cert\": \"$tls_cert\",
    \"prometheus_listen\": \"127.0.0.1:$api_port\",
    \"key\": \"$tls_key\" ,
    \"auth\": {
        \"mode\": \"external\",
        \"config\": {
            \"cmd\": \"./knck\"
        }
    }
}" >server.json
            else
                echo "{
    \"listen\": \":14444\",
    \"cert\": \"$tls_cert\",
    \"prometheus_listen\": \"127.0.0.1:$api_port\",
    \"key\": \"$tls_key\" ,
    \"auth\": {
        \"mode\": \"external\",
        \"config\": {
            \"cmd\": \"./knck\"
        }
    }
}" >server.json
            end
        end
    end
    if $hysteria2
        echo '#!/usr/bin/fish
if ./bin/yq \'.users[].uuid\' userlist | string match -q "$argv[2]"
  printf "$argv[2]"
else
    exit 1
end' >knck
    else
        echo '#!/usr/bin/fish
if ./bin/yq \'.users[].uuid\' userlist | string match -q "$argv[2]"
else
    exit 1
end' >knck
    end
    chmod +x knck
    # Launch core
    if $hysteria2
        $core_path -c ./server.yaml server &
    else
        $core_path -c ./server.json server &
    end
    set last_core_pid $last_pid
    if test "$bodhi_verbose" = debug
        logger 3 "@bodhi.chamber CONT -> Core Launched"
    end
    trap handle_stop SIGTSTP
    trap handle_stop SIGTERM
    trap handle_stop SIGINT
    push $push_interval $last_core_pid $raw_conf_md5
end

#-> use: ["init", "chamber"]

set -x prefix [Bodhi]
switch $argv[1]
    case h help
        help_echo
    case v version
        logger 0 'Genshin@rev2'
    case '*'
        # def var
        set -x bodhi_conf bodhi_root bodhi_verbose upstream_api api_port loc tls_cert nodeid tls_key psk hysteria_ver ipv6

        # parse argv
        argparse -i -n $prefix i/init 'c/conf=' 'v/verbose=' 'd/root=' 'p/port=' 'u/upstream=' 'n/nodeid=' 'o/tls_cert=' 'k/tls_key=' 'q/core_path=' 'r/psk=' f/on_the_fly 'b/obfs=' -- $argv

        # load default settings
        set bodhi_conf config.ini
        set bodhi_root .
        set bodhi_verbose info
        set upstream_api 'https://example.com'
        set api_port 7653
        set nodeid 1
        set core_path /path/to/core
        set tls_key /path/to/key
        set tls_cert /path/to/cert
        set psk leuleuleuleu
        set obfs true

        # load settings from argv
        if set -q _flag_root
            set bodhi_root "$_flag_root"
        end
        if set -q _flag_verbose
            set bodhi_verbose "$_flag_verbose"
        end
        if set -q _flag_conf
            set bodhi_conf "$_flag_conf"
        end

        # load settings from config
        cd "$bodhi_root"
        set loc (pwd)

        if set -q _flag_init; or set -q _flag_on_the_fly
        else
            set upstream_api (configure "upstream_api" "$bodhi_conf")
            set api_port (configure "api_port" "$bodhi_conf")
            set nodeid (configure "nodeid" "$bodhi_conf")
            set core_path (configure "core_path" "$bodhi_conf")
            set tls_cert (configure "tls_cert" "$bodhi_conf")
            set tls_key (configure "tls_key" "$bodhi_conf")
            set psk (configure "psk" "$bodhi_conf")
            set obfs (configure "obfs" "$bodhi_conf")
        end
        # load node settings from argv

        if set -q _flag_upstream
            set upstream_api "$_flag_upstream"
        end
        if set -q _flag_nodeid
            set nodeid "$_flag_nodeid"
        end
        if set -q _flag_port
            set api_port "$_flag_port"
        end
        if set -q _flag_core_path
            set core_path "$_flag_core_path"
        end
        if set -q _flag_tls_cert
            set tls_cert "$_flag_tls_cert"
        end
        if set -q _flag_tls_key
            set tls_key "$_flag_tls_key"
        end
        if set -q _flag_psk
            set psk "$_flag_psk"
        end
        if set -q _flag_obfs
            set obfs "$_flag_obfs"
        end
        # url encode psk
        set psk (string escape --style=url "$psk")
        # Check ipv6
        if curl -sL ipv6.ip.sb >/dev/null
            if test "$bodhi_verbose" = debug
                logger 3 "@bodhi.main CONT -> IPV6 Detected"
            end
            set ipv6 true
        else
            if test "$bodhi_verbose" = debug
                logger 3 "@bodhi.main CONT -> IPV6 Disabled"
            end
            set ipv6 false
        end
        # Final check
        if test (string sub -s -1 "$upstream_api") = /
            set length (string length "$upstream_api")
            set upstream_api (string sub -e (math $length - 1) "$upstream_api")
        end
        # print init vars
        if test "$bodhi_verbose" = debug
            logger 3 "
bodhi_verbose => $bodhi_verbose
bodhi_root => $loc
bodhi_conf => $bodhi_conf
upstream_api => $upstream_api
api_port => $api_port
nodeid => $nodeid
core_path => $core_path
tls_key => $tls_key
tls_cert => $tls_cert
psk => $psk
obfs => $obfs"
            if set -q _flag_init; and set -q _flag_on_the_fly
                logger 3 'EXTLIST => ["on_the_fly", "init"]'
            else
                if set -q _flag_init
                    logger 3 'EXTLIST => ["init"]'
                end
                if set -q _flag_on_the_fly
                    logger 3 'EXTLIST => ["on_the_fly"]'
                end
            end
            logger 3 "@bodhi.main CONT => PreFlight!"
        end

        init

        chamber
end
